@using AdiNeydiProject.DAL;
@using Microsoft.AspNetCore.Http
@using AdiNeydiProject.CustomClasses;
@model dynamic
@{
    ViewData["Title"] = "Home Page";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.min.js" integrity="sha512-pumBsjNRGGqkPzKHndZMaAG+bir374sORyzM3uulLV14lN5LyykqNk8eEeUlUkB3U0M4FApyaHraT65ihJhDpQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>






<div class="sidebar">
    <div class="sidebarRow ">


        <a class="btn btn-primary topelement" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
            <i class="fa-solid fa-filter"></i>
            Filtrele


        </a>
    </div>

    <div class="collapse" id="collapseExample">

        <a class="btn btn-info" data-toggle="collapse" href="#collapsefilter1" role="button" aria-expanded="false" aria-controls="collapsefilter1">
            <i class="fa-solid fa-filter"></i>
            Kategori Seç


        </a>

        <div class="sidebarRoww">
            <div class="collapse" id="collapsefilter1">

                @foreach (Category catfilt in Model.CategoryList)
                {
                    <div class="form-check form-switch">
                        <input class="form-check-input" onchange="RemoveFromCategorylist(this)" value="@catfilt.Id" type="checkbox" id="CategoryCheckBox" checked>
                        <label class="form-check-label" for="flexSwitchCheckDefault">@catfilt.Name</label>
                    </div>
                }



            </div>

        </div>




        <a class="btn btn-info" data-toggle="collapse" href="#collapsefilter2" role="button" aria-expanded="false" aria-controls="collapsefilter2">
            <i class="fa-solid fa-filter"></i>
            Gönderi Türü


        </a>

        <div class="sidebarRoww">
            <div class="collapse" id="collapsefilter2">

                @foreach (AdiNeydiProject.DAL.Type typefilt in Model.TypeList)
                {
                    <div class="form-check form-switch">
                        <input class="form-check-input" onchange="RemoveFromTypelist(this)" value="@typefilt.Id" type="checkbox" id="TypeCheckBox" checked>
                        <label class="form-check-label" for="flexSwitchCheckDefault">@typefilt.Name</label>
                    </div>
                }



            </div>

        </div>


        <script>
           

        </script>

    </div>

</div>
<!-- sidebar ends -->
<!-- feed starts -->
<div class="feed">




    <!-- message sender starts -->
    <div class="messageSender">
        <div class="messageSender__top">
            <img class="user__avatar"
                 src="~/rootimages/avatarpic.jpeg"
                 alt="" />


            <form name="PostYukleForm" action="/Home/PostYukle" class="yok" id="PostYukleFormId" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
                <input class="messageSender__input " id="descriptionfield" placeholder="Dilinin ucundaki şey..." name="description" type="text" />



            </form>
        </div>

        <div class="messageSender__bottom">
            <div class="messageSender__option">
                <audio id="recorder" muted hidden></audio>



                <button class="mic-btn" id="start">  <span class="icon"></span> </button>
                <button class="stop-record-btn" id="stop"><span class="iconstop"></span></button>


                <audio name="audiofile" id="player" controls>
                </audio>

            </div>

            <style>
            </style>

            <script>const recorder = document.getElementById('recorder');
                const player = document.getElementById('player');

                recorder.addEventListener('change', function (e) {
                    const file = e.target.files[0];
                    const url = URL.createObjectURL(file);
                    // Do something with the audio file.
                    player.src = url;
                });</script>


            <div class="messageSender__option">

                @*@using (Html.BeginForm("UploadFile", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <input type="file" name="file" />
                        <button type="submit">Upload</button>
                    }

                    @if (ViewData["ImageUrl"] != null)
                    {
                        <img src="@ViewData["ImageUrl"]" />
                    }*@
                <input type="file" name="file" form="PostYukleFormId" accept="image/png, image/jpeg , image/jpg" />

            </div>

            <div class="messageSender__option">

                <span style="color: orange" class="material-icons"> category </span>


                <select id="kategoriselect" form="PostYukleFormId" name="CategoryId" aria-label="Default select example">
                    <option selected>Kategori Seç</option>
                    @foreach (Category item in Model.CategoryList)
                    {

                        <option value="@item.Id">@item.Name</option>

                    }
                </select>
            </div>

        </div>
        <button id="paylasbtn" class="btn btn-primary" disabled>Paylaş</button>
    </div>
    <div style="visibility:hidden !important;" class="lds-roller" id="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>


    <script>const input = document.getElementById('descriptionfield');

        input.addEventListener('input', function () {
            const minLength = 30;
            const currentLength = this.value.length;
            var paylasButton = document.getElementById("paylasbtn");
            if (currentLength < minLength) {
                paylasButton.disabled = true;
                paylasButton.innerHTML = `En az ${minLength} karakter olmalı.`;

            } else {
                paylasButton.disabled = false;
                paylasButton.innerHTML = 'Paylaş';

            }
        });</script>


    <div style="visibility:hidden" class="lds-ring" id="lds-ring"><div></div><div></div><div></div><div></div></div>

    <div style="visibility:hidden !important;" id="lds-grid" class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
    <div id="postSection" class="postsection">


@{


foreach (Post item in Model.PostList)
{bool ResimCheck = false;
  foreach (var resim in Model.ResimList)
  {  

                 if (resim.Key == item.Id)
                    {
                        ResimCheck = true;
                    }

                 
  }
     if( ResimCheck == true)
                    {       
                        //RESİMLİ BLOG TEMPLATEİ KONULCAK
                

                        <div class="card"  style="width: 100%;border-radius:10px;margin:0.5em;">
                           
                                <div class="card-header" style="background-color:#1977F2;color:white;">
                    <span style="float: left;">  <img class="card-header-img" src="~/rootimages/avatarpic.jpeg" >
                        @foreach (UserIndex user in Model.UserList)
                        {
                           
                            @if (user.UserID == item.UserId)
                            {
                                
                                @user.FirstName @user.LastName
                            }
                            else
                            {
                                @Html.Raw("Silinmiş Kullanıcı");
                            }
                        }
                    </span>
                    <span style="float: right;">
                        @if (item.CategoryId == 1)
                        {
                            <a><i class="fa-solid fa-film"></i> Film</a>    
                        }
                        else if (item.CategoryId == 2)
                        {
                            <a><i class="fa-solid fa-music"></i> Şarkı</a>
                        }
                        else
                        {
                            <a><i class="fa-solid fa-globe"></i> Konu Dışı</a>
                        }

                        
                    </span>
                </div>



    
                     @foreach (var resim in Model.ResimList)
                        {
                            if (resim.Key == item.Id)
                            {
                             
                         <a href="/Home/Postdetails/@item.Id" style="text-align:center;">   <img class="card-img-top" src="@resim.Value" style="width:60%;height:auto;margin: 0 auto;" alt="Card image cap"></a>   
                                 
                            }
                            else
                            {

                            }

                        } 

                   
                    <div class="card-body" style="padding: 0;">
                        <hr>
                        <p class="card-text" style="margin:10px;">  @if (item.Description.Length > 150)
                            {@(item.Description.Substring(0, 150)) @Html.Raw("...") }
                        else
                        {@item.Description}</p>

                        <ul class="list-group list-group-flush">
                            <li class="list-group-item" style="margin:0 auto;"> 
                                
                                           
                    @foreach (var postaudio in Model.AudioList)
                    {
                        @if (postaudio.Key == item.Id)
                        {
                               
                            
                                    <audio controls>
                                        <source src="@postaudio.Value" type="audio/mp3" />
                                    </audio>
                                  
                               

                        }
                        else
                        {
                        }
                    }
                                           
                                                        
                                                        </li>




                  
                    
                    </ul>
                    </div>


                    </div>
       

                    }
                    else if(ResimCheck == false)
                    {
                        //SADECE METİN OLAN TEMPLATE KONULCAK
                      
                <div class="post">

                    <div class="post__top">
                        
                        <img class="user__avatar post__avatar"
                             src="~/rootimages/avatarpic.jpeg"
                             alt="" />
                        <div class="post__topInfo">
                            @foreach (UserIndex user in Model.UserList)
                            {  
                                @if (user.UserID == item.UserId)
                                { <a href="/Home/UserDetails/@user.UserID" class="link">
                                    <h3>@user.FirstName @user.LastName</h3>
                                     </a>
                                }
                            }
                        </div>
                       
                        <div class="post__topDate">
                            <p>25 April at 20:30</p>
                            @if (item.CategoryId == 1)
                            {
                                <a><i class="fa-solid fa-film"></i> Film</a>
                            }
                            else if (item.CategoryId == 2)
                            {
                                <a><i class="fa-solid fa-music"></i> Şarkı</a>
                            }
                            else
                            {
                                <a><i class="fa-solid fa-globe"></i> Konu Dışı</a>

                            }
                        </div>

                    </div>


                    <div class="post__bottom">
   <a href="/Home/Postdetails/@item.Id" class="link" > 
                        <p>
                            @if (item.Description.Length > 150)
                            {@(item.Description.Substring(0, 150)) @Html.Raw("...") }
                        else
                        {@item.Description}
                        </p>



   </a>

                    </div>


                    <div class="post__image">
                        @foreach (var resim in Model.ResimList)
                        {
                            if (resim.Key == item.Id)
                            {
                                <img src="@resim.Value"
                                     alt="" />
                            }
                            else
                            {

                            }

                        }
                    </div>
                    @foreach (var postaudio in Model.AudioList)
                    {
                        @if (postaudio.Key == item.Id)
                        {
                            <div class="post__options">

                                <div class="post__option">

                                    <audio controls>
                                        <source src="@postaudio.Value" type="audio/mp3" />
                                    </audio>

                                </div>


                            </div>
                        }
                        else
                        {
                        }
                    }
                </div>
         
                      
                   
                    }
  }
}
    

    </div>



    <script>


       




        //COLOR TEME  END


        let pageIndex = 10;

        const TypeList = []; // boş bir dizi oluşturun
        const CategoryList = [];
        // form elemanını seçin ve içindeki checkbox elemanlarını alın
        const Typecheckboxes = document.querySelectorAll('#TypeCheckBox');
        const Categorycheckboxes = document.querySelectorAll('#CategoryCheckBox');


        // checkbox elemanlarını döngü ile kontrol edin
        Typecheckboxes.forEach((checkbox) => {
            if (checkbox.checked) { // eğer checkbox seçiliyse
                TypeList.push(checkbox.value); // seçilen değeri diziye ekleyin
            }
        });

        console.log(TypeList);


        Categorycheckboxes.forEach((checkbox) => {
            if (checkbox.checked) { // eğer checkbox seçiliyse
                CategoryList.push(checkbox.value); // seçilen değeri diziye ekleyin
            }
        });

        console.log(CategoryList);



        function RemoveFromTypelist(checkbox) {
            const value = checkbox.value;
            if (checkbox.checked) {
                if (!TypeList.includes(value)) {
                    TypeList.push(value);
                    console.log("Array'e eklendi: " + value);
                    GetFilteredData();
                    let pageIndex = 5;

                }
            } else {
                const index = TypeList.indexOf(value);
                if (index !== -1) {
                    TypeList.splice(index, 1);
                    console.log("Array'den çıkarıldı: " + value);
                    GetFilteredData();
                    let pageIndex = 5;

                }
            }
            console.log("Array: ", TypeList);
        }


        function RemoveFromCategorylist(checkbox) {
            const value = checkbox.value;
            if (checkbox.checked) {
                if (!CategoryList.includes(value)) {
                    CategoryList.push(value);
                    console.log("Array'e eklendi: " + value);
                    GetFilteredData();
                    let pageIndex = 5;

                }
            } else {
                const index = CategoryList.indexOf(value);
                if (index !== -1) {
                    CategoryList.splice(index, 1);
                    console.log("Array'den çıkarıldı: " + value);
                    GetFilteredData();
                    let pageIndex = 5;

                }
            }
            console.log("Array: ", CategoryList);
        }
        //lds - ring

        function GetFilteredData() {
            var ldsring = document.getElementById("lds-ring");
        
            ldsring.style.visibility = "visible";



            console.log("GET data TYPE arrayleri" + TypeList)
            console.log("GET data  Category arrayleri " + CategoryList)
            $.ajax({
                url: "/Home/GetMoreData",
                data: { pageIndex: 0, categories: CategoryList, postTypes: TypeList },
                type: "POST",
                success: function (response) {
                   
                    console.log(response);

                    $('#postSection').html("");
                    $('#postSection').html(response);



                    ldsring.style.visibility = "hidden";
                   
                    console.log(pageIndex);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }







        /*  SİYA HTEM CHECK*/






        function getMoreData() {
            var ldsgrid = document.getElementById("lds-grid");
            ldsgrid.style.visibility = "visible";


            const postTypes = []; // boş bir dizi oluşturun
            const categories = [];
            // form elemanını seçin ve içindeki checkbox elemanlarını alın
            const Typecheckboxes = document.querySelectorAll('#TypeCheckBox');
            const Categorycheckboxes = document.querySelectorAll('#CategoryCheckBox');


            // checkbox elemanlarını döngü ile kontrol edin
            Typecheckboxes.forEach((checkbox) => {
                if (checkbox.checked) { // eğer checkbox seçiliyse
                    postTypes.push(checkbox.value); // seçilen değeri diziye ekleyin
                }
            });

            console.log(postTypes);


            Categorycheckboxes.forEach((checkbox) => {
                if (checkbox.checked) { // eğer checkbox seçiliyse
                    categories.push(checkbox.value); // seçilen değeri diziye ekleyin
                }
            });

            console.log("GET data TYPE arrayleri" + postTypes)
            console.log("GET data  Category arrayleri " + categories)
            $.ajax({
                url: "/Home/GetMoreData",
                data: { pageIndex: pageIndex, categories: categories, postTypes: postTypes },
                type: "POST",
                success: function (response) {
                    // verileri işleme ve ekranda görüntüleme işlemleri burada yapılır


                    $("#postSection").append(response);
                    
                    ldsgrid.style.visibility = "hidden";
                
                    pageIndex += 10;
                    console.log(pageIndex);
                    
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
         
        }


        $(window).scroll(function () {
            if ($(window).scrollTop() + $(window).height() == $(document).height()) {
                getMoreData();
            }
        });

    </script>




    <script>class VoiceRecorder {
            constructor() {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    console.log("getUserMedia supported")
                } else {
                    console.log("getUserMedia is not supported on your browser!")
                }

                this.mediaRecorder
                this.stream
                this.chunks = []
                this.isRecording = false

                this.recorderRef = document.querySelector("#recorder")
                this.playerRef = document.querySelector("#player")
                this.startRef = document.querySelector("#start")
                this.stopRef = document.querySelector("#stop")

                this.startRef.onclick = this.startRecording.bind(this)
                this.stopRef.onclick = this.stopRecording.bind(this)

                this.constraints = {
                    audio: true,
                    video: false
                }

            }

            handleSuccess(stream) {
                this.stream = stream
                this.stream.oninactive = () => {
                    console.log("Stream ended!")
                };
                this.recorderRef.srcObject = this.stream
                this.mediaRecorder = new MediaRecorder(this.stream)
                console.log(this.mediaRecorder)
                this.mediaRecorder.ondataavailable = this.onMediaRecorderDataAvailable.bind(this)
                this.mediaRecorder.onstop = this.onMediaRecorderStop.bind(this)
                this.recorderRef.play()
                this.mediaRecorder.start()
            }

            handleError(error) {
                console.log("navigator.getUserMedia error: ", error)
            }

            onMediaRecorderDataAvailable(e) { this.chunks.push(e.data) }

            onMediaRecorderStop(e) {

                const blob = new Blob(this.chunks, { 'type': 'audio/mpeg; codecs=opus' })

                const audioURL = window.URL.createObjectURL(blob)
                this.playerRef.src = audioURL
                this.chunks = []
                this.stream.getAudioTracks().forEach(track => track.stop())
                this.stream = null
            }

            startRecording() {
                if (this.isRecording) return
                this.isRecording = true
                this.startRef.innerHTML = '<span class="iconrecording"></span>'
                this.playerRef.src = ''
                navigator.mediaDevices
                    .getUserMedia(this.constraints)
                    .then(this.handleSuccess.bind(this))
                    .catch(this.handleError.bind(this))
            }

            stopRecording() {
                if (!this.isRecording) return
                this.isRecording = false
                this.startRef.innerHTML = '<span class="icon"></span>'
                this.recorderRef.pause()
                this.mediaRecorder.stop()
            }

        }

        window.voiceRecorder = new VoiceRecorder()</script>


    <script>const submitAndReload = function () {
            // Form verilerini topla
            const formData = new FormData(document.getElementById("PostYukleFormId"));
            const loader = document.getElementById("lds-roller");

            document.addEventListener("mousedown", function (event) {
                if (event.button === 0) { // sol tık
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
            }, true);

            // Ses dosyasını yükle
            const audioSrc = document.getElementById('player').src;
            if (audioSrc && audioSrc.trim() !== '') { // audioSrc boş değilse
                const xhr = new XMLHttpRequest();
                xhr.open("GET", audioSrc);
                xhr.responseType = "blob";
                xhr.onload = function () {
                    const blobData = xhr.response;
                    loader.style.visibility = "visible";

                    // FormData nesnesine ekle
                    formData.append("audiofile", blobData, "recording.mp3");

                    // Form verilerini sunucuya gönder
                    fetch("/Home/PostYukle", {
                        method: "POST",
                        body: formData
                    })
                        .then(() => {
                            // Sunucudan yanıt alındıktan sonra sayfayı yenile
                            location.reload();
                        });
                };
                xhr.send();
            } else {
                // audioSrc boş ise yapılacak işlem
                console.log("Ses dosyası yok");
                // FormData nesnesine "audiofile" ekleme
                formData.append("audiofile", null);
                // Form verilerini sunucuya gönder
                fetch("/Home/PostYukle", {
                    method: "POST",
                    body: formData
                })
                    .then(() => {
                        // Sunucudan yanıt alındıktan sonra sayfayı yenile
                        location.reload();
                    });
            }
        };

        document.getElementById("paylasbtn").addEventListener("click", submitAndReload); 

    </script>

</div>
